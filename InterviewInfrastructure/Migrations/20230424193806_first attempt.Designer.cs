// <auto-generated />
using System;
using InterviewInfrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewInfrastructure.Migrations
{
    [DbContext(typeof(InterViewDbContext))]
    [Migration("20230424193806_first attempt")]
    partial class firstattempt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InterviewCore.Entity.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewId"), 1L, 1);

                    b.Property<int>("InterviewRound")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleOn")
                        .HasColumnType("datetime2");

                    b.HasKey("InterviewId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("InterviewCore.Entity.Interviewer", b =>
                {
                    b.Property<int>("InterviewerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewerID"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.HasKey("InterviewerID");

                    b.HasIndex("InterviewId");

                    b.ToTable("Interviewer");
                });

            modelBuilder.Entity("InterviewCore.Entity.InterviewFeedBack", b =>
                {
                    b.Property<int>("InterviewFeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewFeedBackId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("InterviewFeedBackId");

                    b.HasIndex("InterviewId");

                    b.ToTable("InterviewFeedBack");
                });

            modelBuilder.Entity("InterviewCore.Entity.InterviewType", b =>
                {
                    b.Property<int>("InterviewTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InterviewTypeCode"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("InterviewId")
                        .HasColumnType("int");

                    b.HasKey("InterviewTypeCode");

                    b.HasIndex("InterviewId");

                    b.ToTable("interviewTypes");
                });

            modelBuilder.Entity("InterviewCore.Entity.Recruiter", b =>
                {
                    b.Property<int>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecruiterId"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.HasKey("RecruiterId");

                    b.HasIndex("InterviewId");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("InterviewCore.Entity.Interviewer", b =>
                {
                    b.HasOne("InterviewCore.Entity.Interview", null)
                        .WithMany("InterviewerId")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("InterviewCore.Entity.InterviewFeedBack", b =>
                {
                    b.HasOne("InterviewCore.Entity.Interview", null)
                        .WithMany("InterviewFeedBackId")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("InterviewCore.Entity.InterviewType", b =>
                {
                    b.HasOne("InterviewCore.Entity.Interview", null)
                        .WithMany("InterviewTypeCode")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("InterviewCore.Entity.Recruiter", b =>
                {
                    b.HasOne("InterviewCore.Entity.Interview", null)
                        .WithMany("RecruiterID")
                        .HasForeignKey("InterviewId");
                });

            modelBuilder.Entity("InterviewCore.Entity.Interview", b =>
                {
                    b.Navigation("InterviewFeedBackId");

                    b.Navigation("InterviewTypeCode");

                    b.Navigation("InterviewerId");

                    b.Navigation("RecruiterID");
                });
#pragma warning restore 612, 618
        }
    }
}
